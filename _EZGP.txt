// EZGP written by Yuto Iida, 2019/10/31

// Copyright 2019 Yuto Iida

// Permission is hereby granted, free of charge, to any person obtaining a copy of this software   and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// Action Bar description file :_EZGP
run("Action Bar","/plugins/ActionBar/_EZGP.txt");
exit;

//<sticky>
<onTop>
<DnD>
<main>
<text>GPファイルをここにドロップ
<text><html><font size=2 color=green>>0. Zoom
<line>
<button> zoom out
label=-
icon=noicon
arg=<macro>
run("Out");
setTool("hand");
</macro>
<button> zoom reset
label=100%
icon=noicon
arg=<macro>
	run("View 100%");
	setTool("hand");
</macro>
<button> zoom in
label=+
icon=noicon
arg=<macro>
	run("In");
	setTool("hand");
</macro>
</line>
<text><html><font size=2 color=green>>1.
<line>
<button> 基準線の設定
label=基準線の設定
icon=noicon
arg=<macro>
	startupFunc();
	waitForUser("まず水平に0→90度の基準線を選択してください");
	defineBase90();
</macro>
</line>

<text><html><font size=2 color=green>>2. ツールを選択し視野を指定
<line>
<button> 点
label=点
icon=noicon
arg=<macro>
	setTool("point");
	run("Point Tool...", "type=Hybrid color=Yellow size=[Extra Large]");
	//showMessage("ポイントツールが選択されました\n中心から指定した点までが視野になります\ntボタンで点を確定します");
	showText("ヒント", "ポイントツールが選択されました\n中心から指定した点までが視野になります\ntボタンで点を確定します");
	wait(3000);
	selectWindow("ヒント");
	run("Close");
</macro>
<button> 線
label=線
icon=noicon
arg=<macro>
	setTool("line");
	showText("ヒント", "ラインツールが選択されました\n各方向の視野を中心から外側に向かって計測してください\ntボタンで線分を確定します");
	wait(3000);
	selectWindow("ヒント");
	run("Close");
</macro>
</line>

<text><html><font size=2 color=green>>3.
<line>
<button> 測定
label=測定
icon=noicon
arg=<macro>
	AnalyzeROIs();
	showText("ヒント", "測定が完了しました\n[Results]を確認してください\n必要に応じて[ROI Manager]から修正を行ってください");
	wait(3000);
	selectWindow("ヒント");
	run("Close");
</macro>
</line>

<text><html><font size=2 color=green>>4. 結果の書き込み
<line>
<button> I/4視標
label=I/4視標
icon=noicon
arg=<macro>
	AnalyzeROIs();
	drawInI4();
	showText("ヒント", "I/4視標として結果を書き込みました\n測定視標を変更する場合には「1.基準線の設定」から行ってください");
	wait(3000);
	selectWindow("ヒント");
	run("Close");
</macro>
<button> I/2視標
label=I/2視標
icon=noicon
arg=<macro>
	AnalyzeROIs();
	drawInI2();
	showText("ヒント", "I/2視標として結果を書き込みました\n測定視標を変更する場合には「1.基準線の設定」から行ってください");
	wait(3000);
	selectWindow("ヒント");
	run("Close");
</macro>
</line>

<text><html><font size=2 color=green>>5. オプション
<line>
<button> 印刷...
label=印刷...
icon=noicon
arg=<macro>
	run("Print...");
</macro>
</line>
<line>
<button> 別名で保存...
label=別名で保存...
icon=noicon
arg=<macro>
	saveAs("Jpeg");
</macro>
</line>


<codeLibrary>
//GP測定半自動化マクロ
//ActionBar用に各機能を関数化

//初期化関数
function startupFunc(){
	if (roiManager("count") != 0 ){
		roiManager("reset");
	}
	run("Clear Results");
	setResult("向き(度)", nResults, 0);
	setResult("向き(度)", nResults, 45);
	setResult("向き(度)", nResults, 90);
	setResult("向き(度)", nResults, 135);
	setResult("向き(度)", nResults, 180);
	setResult("向き(度)", nResults, 225);
	setResult("向き(度)", nResults, 270);
	setResult("向き(度)", nResults, 315);
	setResult("向き(度)", nResults, "合計");
	updateResults();
//	showMessage("まず水平に0→90度の基準線を選択してください");
	setTool("line");
	setLineWidth(3);
}

function defineBase90(){ //基準線の設定
	roiManager("Add", "red", 3);
	roiManager("select", 0);
	roiManager("rename", "0→90度基準線");
	roiManager("show all without labels");
}

function getLength(x1, y1, x2, y2){
    return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
}

// Returns the angle in degrees between the specified line and the horizontal axis.
function getAngle(x1, y1, x2, y2) {
      q1=0; q2orq3=2; q4=3; //quadrant
      dx = x2-x1;
      dy = y1-y2;
      if (dx!=0)
          angle = atan(dy/dx);
      else {
          if (dy>=0)
              angle = PI/2;
          else
              angle = -PI/2;
      }
      angle = (180/PI)*angle;
      if (dx>=0 && dy>=0)
           quadrant = q1;
      else if (dx<0)
          quadrant = q2orq3;
      else
          quadrant = q4;
      if (quadrant==q2orq3)
          angle = angle+180.0;
      else if (quadrant==q4)
          angle = angle+360.0;
      return angle;
}

function getAngleIndex(angleX, angle0){
	dtAngle = angleX - angle0;
	if (dtAngle <0){
		dtAngle +=360;
	}
	if (dtAngle>350 || dtAngle<10)
		return 1;
	else if (dtAngle>35 && dtAngle<55)
		return 2;
	else if (dtAngle>80 && dtAngle<100)
		return 3;
	else if (dtAngle>125 && dtAngle<145)
		return 4;
	else if (dtAngle>170 && dtAngle<190)
		return 5;
	else if (dtAngle>215 && dtAngle<235)
		return 6;
	else if (dtAngle>260 && dtAngle<280)
		return 7;
	else if (dtAngle>305 && dtAngle<325)
		return 8;
	else {
		showMessage("視野の測定角度が正しくありません");
		return 0; //errorで0を返す
	}
}

function AnalyzeROIs(){ //ROI Managerのリストの線分をすべて解析する
	n = roiManager("count"); //測定した線分の数を格納
	angle = newArray(n); //それぞれの線分の角度の実測値を格納
	angleIndex = newArray(n); //それぞれの線分の角度区分を格納
	NumOfEachAngle = newArray(0, 0, 0, 0, 0, 0, 0, 0, 0); //それぞれの角度区分で測定された線分の数を格納
	LengthOfEachAngle = newArray(0, 0, 0, 0, 0, 0, 0, 0, 0); //それぞれの角度区分で測定された線分の長さの和を格納
	length = newArray(n);
	SumOfEachAngle = 0;
	NumOfMeasures = 0;

	roiManager("select", 0);
	if (selectionType!=5){
          	exit("線分が正しく選択されていません");
	}
    getLine(x01, y01, x02, y02, lineWidth0);
    length[0] = getLength(x01, y01, x02, y02);
    angle[0] = getAngle(x01, y01, x02, y02);
	for (i=1; i<n; i++) {
		roiManager("select", i);
		if (selectionType ==10){
			getSelectionCoordinates(xp, yp);
			angle[i] = getAngle(x01, y01, xp[0], yp[0]);
			length[i]= getLength(x01, y01, xp[0], yp[0]);
		} else if (selectionType ==5){
			getLine(x1, y1, x2, y2, lineWidth);
			angle[i] = getAngle(x1, y1, x2, y2);
			length[i]= getLength(x1, y1, x2, y2);
		} else {
			exit("線分が正しく選択されていません");
		}

		//print("length="+length[i]+", angle="+angle[i]); //debug用
		angleIndex[i] = getAngleIndex(angle[i], angle[0]);
		//print("angleIndex of i="+i+" is "+angleIndex[i]); //debug用
		NumOfEachAngle[angleIndex[i]]+= 1;
		LengthOfEachAngle[angleIndex[i]] += length[i];
		if (angleIndex[i]==0)
			roiManager("rename", "角度エラー_"+(NumOfEachAngle[angleIndex[i]]));
		else
			roiManager("rename", (angleIndex[i]-1)*45+"度_"+(NumOfEachAngle[angleIndex[i]]));
	}
	for (j=1; j<9; j++) {
		setResult("測定数", j-1, NumOfEachAngle[j]);
		setResult("視野角度(度)", j-1, round(LengthOfEachAngle[j]/length[0]*90));
		SumOfEachAngle += round(LengthOfEachAngle[j]/length[0]*90);
		NumOfMeasures += NumOfEachAngle[j];
		//print("SumOfEachAngle" + SumOfEachAngle);
	}
	setResult("測定数", 8, NumOfMeasures);
	setResult("視野角度(度)", 8, SumOfEachAngle);
	updateDisplay();
}
function drawInI4(){
	//まず基準線の取得
	n = roiManager("count"); //測定した線分の数を格納
	if (n==0) {
		exit("基準線が設定されていません");
	}
	roiManager("select", 0);
	if (selectionType!=5){
          	exit("基準線が設定されていません");
	}
    getLine(x01, y01, x02, y02, lineWidth);
    fsize = abs(x02-x01)/9*1; //基準線を基準にフォントを指定
    setColor("white");
    setFont("SansSerif" , fsize, "antialiased");
    setJustification("left");
  	drawString("I/4視野", x02+fsize, y02+fsize*2, "black");
		drawString(" "+toString(getResult("視野角度(度)", 8)), x02+fsize, y02+fsize*3, "black");
  	setFont("SansSerif" , fsize*2/3, "antialiased");
		drawResults(5); //I4は線の幅が5
}
function drawInI2(){
	//まず基準線の取得
	n = roiManager("count"); //測定した線分の数を格納
	if (n==0) {
		exit("基準線が設定されていません");
	}
	roiManager("select", 0);
	if (selectionType!=5){
          	exit("基準線が設定されていません");
	}
    getLine(x01, y01, x02, y02, lineWidth);
    fsize = abs(x02-x01)/9*1; //基準線を基準にフォントを指定
    setColor("yellow");
    setFont("SansSerif" , fsize*3/4, "italic");
    setJustification("right");
  	drawString(" I/2視野", x02+fsize, y02+fsize*2, "black");
		drawString(" "+toString(getResult("視野角度(度)", 8)), x02+fsize, y02+fsize*3, "black");
  	setFont("SansSerif" , fsize*0.5, "italic");
		drawResults(3); //I2は線の幅が3
}

function drawResults(dcolor) {
	n = roiManager("count"); //測定した線分の数を格納
	roiManager("select", 0);
	getLine(x01, y01, x02, y02, lineWidth);
	length0 = getLength(x01, y01, x02, y02);
    angle0 = getAngle(x01, y01, x02, y02);
    //print("angle0= "+angle0); //for debug
	for (i=0; i<nResults-1; i++){
		angle_i=getResult("視野角度(度)", i);
		drawString(" "+toString(angle_i), x01+length0*7/9*cos((angle0+i*45)*PI/180), y01-length0*7/9*sin((angle0+i*45)*PI/180), "black");
	}
	if (dcolor ==5){
		setForegroundColor(0, 255, 0);
	} else if (dcolor ==3) {
		setForegroundColor(255, 255, 0);
	} else {
		setForegroundColor(255, 0, 0);
	}
	for (i=1; i<n; i++){
		roiManager("select", i);
		if (selectionType ==10){ //点の場合
			getSelectionCoordinates(xp, yp);
			makeLine(x01, y01, xp[0], yp[0], dcolor);
			run("Fill", "slice");
			updateDisplay();
		} else if (selectionType ==5){ //線の場合
			roiManager("Set Line Width", dcolor);
			run("Fill", "slice");
			updateDisplay();
		} else { //そのほかの場合
			exit("線分が正しく選択されていません");
		}
	}
}

//関数定義終わり
</codeLibrary>

<startupAction>
	startupFunc();
</startupAction>

// end of file
